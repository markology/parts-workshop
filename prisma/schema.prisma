generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      Boolean?            @default(false)
  passwordHash       String? // important for credentials
  createdAt          DateTime            @default(now())
  image              String?
  name               String?
  accounts           Account[]
  maps               Map[]
  tags               Tag[]
  parts              Part[]
  conflicts          Conflict[]
  journalEntries     JournalEntry[]
  soothingTechniques SoothingTechnique[]
  impressions        Impression[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Map {
  id                 String   @id @default(cuid())
  userId             String
  title              String
  nodes              Json
  edges              Json
  sidebarImpressions Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Tag {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  conflicts      Conflict[]     @relation("ConflictTags")
  journalEntries JournalEntry[] @relation("JournalTags")

  @@unique([userId, label])
  @@index([userId])
}

model Part {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  title              String
  scratchpad         String?
  soothingTechniques SoothingTechnique[] @relation("PartSoothing")
  impressions        Impression[]        @relation("PartImpressions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SoothingTechnique {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  label String
  parts Part[] @relation("PartSoothing")

  createdAt DateTime @default(now())
}

model Conflict {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  title   String
  journal String?
  partIds String[]
  tags    Tag[]    @relation("ConflictTags")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  JournalEntry JournalEntry[]
}

model JournalEntry {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  title   String?
  content String
  tags    Tag[]   @relation("JournalTags")

  conflictId String?
  conflict   Conflict? @relation(fields: [conflictId], references: [id])

  nodeId    String? // Optional: linked to a node if not global
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([nodeId])
  @@unique([userId, nodeId]) // âœ… ensures only one journal per node per user (nodeId=null for global)
}

model Impression {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  label      String
  type       String
  isNode     Boolean @default(false)
  nodeId     String?
  scratchpad String?
  part       Part?   @relation("PartImpressions", fields: [partId], references: [id])

  createdAt DateTime @default(now())
  partId    String?
}
